/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleProof, MerkleProofInterface } from "../MerkleProof";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "data",
        type: "string[]",
      },
    ],
    name: "buildMerkleTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalMerkleTree",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "hashes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600180546001600160a01b031916331790556105ca806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630b2b5e7614610051578063495906571461006f578063501895ae146100855780639c51242a14610098575b600080fd5b6100596100ad565b604051610066919061032d565b60405180910390f35b610077610105565b604051908152602001610066565b610077610093366004610371565b610137565b6100ab6100a63660046103d1565b610158565b005b606060008054806020026020016040519081016040528092919081815260200182805480156100fb57602002820191906000526020600020905b8154815260200190600101908083116100e7575b5050505050905090565b60008054819061011790600190610500565b8154811061012757610127610517565b9060005260206000200154905090565b6000818154811061014757600080fd5b600091825260209091200154905081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146101c35760405162461bcd60e51b815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015260640160405180910390fd5b60005b81518110156102385760008282815181106101e3576101e3610517565b60200260200101516040516020016101fb919061052d565b60408051601f198184030181529190528051602091820120825460018101845560009384529190922001558061023081610568565b9150506101c6565b50805160005b81156103285760005b610252600184610500565b811015610309576000806102668385610583565b8154811061027657610276610517565b60009182526020822001549061028c8486610583565b610297906001610583565b815481106102a7576102a7610517565b90600052602060002001546040516020016102cc929190918252602082015260400190565b60408051601f19818403018152919052805160209182012082546001810184556000938452919092200155610302600282610583565b9050610247565b506103148282610583565b905061032160028361059b565b915061023e565b505050565b6020808252825182820181905260009190848201906040850190845b8181101561036557835183529284019291840191600101610349565b50909695505050505050565b60006020828403121561038357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156103c9576103c961038a565b604052919050565b600060208083850312156103e457600080fd5b823567ffffffffffffffff808211156103fc57600080fd5b8185019150601f868184011261041157600080fd5b8235828111156104235761042361038a565b8060051b6104328682016103a0565b918252848101860191868101908a84111561044c57600080fd5b87870192505b838310156104dc5782358681111561046a5760008081fd5b8701603f81018c1361047c5760008081fd5b888101356040888211156104925761049261038a565b6104a3828901601f19168c016103a0565b8281528e828486010111156104b85760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610452565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610512576105126104ea565b500390565b634e487b7160e01b600052603260045260246000fd5b6000825160005b8181101561054e5760208186018101518583015201610534565b8181111561055d576000828501525b509190910192915050565b600060001982141561057c5761057c6104ea565b5060010190565b60008219821115610596576105966104ea565b500190565b6000826105b857634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c634300080a000a";

type MerkleProofConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProof__factory extends ContractFactory {
  constructor(...args: MerkleProofConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MerkleProof";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleProof> {
    return super.deploy(overrides || {}) as Promise<MerkleProof>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleProof {
    return super.attach(address) as MerkleProof;
  }
  connect(signer: Signer): MerkleProof__factory {
    return super.connect(signer) as MerkleProof__factory;
  }
  static readonly contractName: "MerkleProof";
  public readonly contractName: "MerkleProof";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofInterface {
    return new utils.Interface(_abi) as MerkleProofInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleProof {
    return new Contract(address, _abi, signerOrProvider) as MerkleProof;
  }
}
