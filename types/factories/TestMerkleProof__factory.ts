/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestMerkleProof,
  TestMerkleProofInterface,
} from "../TestMerkleProof";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "data",
        type: "string[]",
      },
    ],
    name: "buildTestMerkleTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "getStringHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTestMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalTestMerkleTree",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "hashes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "verifyData",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600180546001600160a01b03191633179055610886806100326000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063bddf069911610050578063bddf0699146100d5578063c2161c31146100dd578063e4aeee20146100f057600080fd5b8063501895ae1461007757806351e452bd1461009d57806376f508b7146100b2575b600080fd5b61008a610085366004610539565b610105565b6040519081526020015b60405180910390f35b6100a5610126565b6040516100949190610552565b6100c56100c036600461064d565b61017e565b6040519015158152602001610094565b61008a61023a565b61008a6100eb366004610692565b61026c565b6101036100fe3660046106c7565b61029c565b005b6000818154811061011557600080fd5b600091825260209091200154905081565b6060600080548060200260200160405190810160405280929190818152602001828054801561017457602002820191906000526020600020905b815481526020019060010190808311610160575b5050505050905090565b60008083604051602001610192919061078a565b60405160208183030381529060405280519060200120905061023260008054806020026020016040519081016040528092919081815260200182805480156101f957602002820191906000526020600020905b8154815260200190600101908083116101e5575b5050600080549093506102109250600191506107db565b81548110610220576102206107f2565b90600052602060002001548386610471565b949350505050565b60008054819061024c906001906107db565b8154811061025c5761025c6107f2565b9060005260206000200154905090565b60008160405160200161027f919061078a565b604051602081830303815290604052805190602001209050919050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103075760405162461bcd60e51b815260206004820152600d60248201527f4d757374206265206f776e657200000000000000000000000000000000000000604482015260640160405180910390fd5b60005b815181101561037c576000828281518110610327576103276107f2565b602002602001015160405160200161033f919061078a565b60408051601f198184030181529190528051602091820120825460018101845560009384529190922001558061037481610808565b91505061030a565b50805160005b811561046c5760005b6103966001846107db565b81101561044d576000806103aa8385610823565b815481106103ba576103ba6107f2565b6000918252602082200154906103d08486610823565b6103db906001610823565b815481106103eb576103eb6107f2565b9060005260206000200154604051602001610410929190918252602082015260400190565b60408051601f19818403018152919052805160209182012082546001810184556000938452919092200155610446600282610823565b905061038b565b506104588282610823565b9050610465600283610851565b9150610382565b505050565b600082815b865181101561052d576000878281518110610493576104936107f2565b602002602001015190506002856104aa9190610865565b6104df57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061050c565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b610517600286610851565b945050808061052590610808565b915050610476565b50909314949350505050565b60006020828403121561054b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561058a5783518352928401929184019160010161056e565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156105d5576105d5610596565b604052919050565b600082601f8301126105ee57600080fd5b813567ffffffffffffffff81111561060857610608610596565b61061b601f8201601f19166020016105ac565b81815284602083860101111561063057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561066057600080fd5b823567ffffffffffffffff81111561067757600080fd5b610683858286016105dd565b95602094909401359450505050565b6000602082840312156106a457600080fd5b813567ffffffffffffffff8111156106bb57600080fd5b610232848285016105dd565b600060208083850312156106da57600080fd5b823567ffffffffffffffff808211156106f257600080fd5b818501915085601f83011261070657600080fd5b81358181111561071857610718610596565b8060051b6107278582016105ac565b918252838101850191858101908984111561074157600080fd5b86860192505b8383101561077d5782358581111561075f5760008081fd5b61076d8b89838a01016105dd565b8352509186019190860190610747565b9998505050505050505050565b6000825160005b818110156107ab5760208186018101518583015201610791565b818111156107ba576000828501525b509190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156107ed576107ed6107c5565b500390565b634e487b7160e01b600052603260045260246000fd5b600060001982141561081c5761081c6107c5565b5060010190565b60008219821115610836576108366107c5565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826108605761086061083b565b500490565b6000826108745761087461083b565b50069056fea164736f6c634300080a000a";

type TestMerkleProofConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMerkleProofConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMerkleProof__factory extends ContractFactory {
  constructor(...args: TestMerkleProofConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestMerkleProof";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMerkleProof> {
    return super.deploy(overrides || {}) as Promise<TestMerkleProof>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestMerkleProof {
    return super.attach(address) as TestMerkleProof;
  }
  connect(signer: Signer): TestMerkleProof__factory {
    return super.connect(signer) as TestMerkleProof__factory;
  }
  static readonly contractName: "TestMerkleProof";
  public readonly contractName: "TestMerkleProof";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMerkleProofInterface {
    return new utils.Interface(_abi) as TestMerkleProofInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMerkleProof {
    return new Contract(address, _abi, signerOrProvider) as TestMerkleProof;
  }
}
