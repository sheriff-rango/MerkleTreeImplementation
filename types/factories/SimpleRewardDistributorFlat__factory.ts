/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimpleRewardDistributorFlat,
  SimpleRewardDistributorFlatInterface,
} from "../SimpleRewardDistributorFlat";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161072438038061072483398101604081905261002f9161004f565b6001600160601b0319606092831b1660a05260c05233901b608052610087565b60008060408385031215610061578182fd5b82516001600160a01b0381168114610077578283fd5b6020939093015192949293505050565b60805160601c60a05160601c60c0516106626100c26000398060de528061010252806101cc525080610233528061031c5250506106626000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639e34070f116100505780639e34070f14610092578063ae0b51df146100b2578063fc0c546a146100c757610067565b80632eb4a7ab1461006c578063495906571461008a575b600080fd5b6100746100dc565b6040516100819190610523565b60405180910390f35b610074610100565b6100a56100a0366004610420565b610124565b6040516100819190610518565b6100c56100c0366004610438565b610139565b005b6100cf61031a565b60405161008191906104eb565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b60009081526001602052604090205460ff1690565b61014284610124565b156101685760405162461bcd60e51b815260040161015f9061052c565b60405180910390fd5b600084338560405160200161017f939291906104c3565b6040516020818303038152906040528051906020012090506101f78383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925085915061033e9050565b6102135760405162461bcd60e51b815260040161015f90610589565b61021c856103db565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061026a90339088906004016104ff565b602060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc91906103f9565b6102d85760405162461bcd60e51b815260040161015f906105ca565b7f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02685338660405161030b9392919061060d565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815b85518110156103d057600086828151811061035a57fe5b6020026020010151905080831161039b57828160405160200161037e9291906104b5565b6040516020818303038152906040528051906020012092506103c7565b80836040516020016103ae9291906104b5565b6040516020818303038152906040528051906020012092505b50600101610343565b509092149392505050565b6000908152600160208190526040909120805460ff19169091179055565b60006020828403121561040a578081fd5b81518015158114610419578182fd5b9392505050565b600060208284031215610431578081fd5b5035919050565b6000806000806060858703121561044d578283fd5b8435935060208501359250604085013567ffffffffffffffff80821115610472578384fd5b818701915087601f830112610485578384fd5b813581811115610493578485fd5b88602080830285010111156104a6578485fd5b95989497505060200194505050565b918252602082015260400190565b92835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b60208082526028908201527f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060408201527f636c61696d65642e000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f666040820152601760f91b606082015260800190565b60208082526023908201527f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60408201526232b21760e91b606082015260800190565b9283526001600160a01b0391909116602083015260408201526060019056fea264697066735822122098cc5ad1fbfe38e635dd5c82441f9515bb88e75281bbf9e252cdc6ce3851e6cd64736f6c63430007000033";

type SimpleRewardDistributorFlatConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleRewardDistributorFlatConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleRewardDistributorFlat__factory extends ContractFactory {
  constructor(...args: SimpleRewardDistributorFlatConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleRewardDistributorFlat";
  }

  deploy(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleRewardDistributorFlat> {
    return super.deploy(
      _token,
      _merkleRoot,
      overrides || {}
    ) as Promise<SimpleRewardDistributorFlat>;
  }
  getDeployTransaction(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _merkleRoot, overrides || {});
  }
  attach(address: string): SimpleRewardDistributorFlat {
    return super.attach(address) as SimpleRewardDistributorFlat;
  }
  connect(signer: Signer): SimpleRewardDistributorFlat__factory {
    return super.connect(signer) as SimpleRewardDistributorFlat__factory;
  }
  static readonly contractName: "SimpleRewardDistributorFlat";
  public readonly contractName: "SimpleRewardDistributorFlat";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleRewardDistributorFlatInterface {
    return new utils.Interface(_abi) as SimpleRewardDistributorFlatInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleRewardDistributorFlat {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SimpleRewardDistributorFlat;
  }
}
