/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimpleRewardDistributor,
  SimpleRewardDistributorInterface,
} from "../SimpleRewardDistributor";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639e34070f14602d575b600080fd5b604760048036036020811015604157600080fd5b5035605b565b604080519115158252519081900360200190f35b60009081526020819052604090205460ff169056fea2646970667358221220da3e7687cc2a2becf63c452b24a5a6a8c9636bf3244212b78481cea945c1374564736f6c63430007000033";

type SimpleRewardDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleRewardDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleRewardDistributor__factory extends ContractFactory {
  constructor(...args: SimpleRewardDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleRewardDistributor";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleRewardDistributor> {
    return super.deploy(overrides || {}) as Promise<SimpleRewardDistributor>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SimpleRewardDistributor {
    return super.attach(address) as SimpleRewardDistributor;
  }
  connect(signer: Signer): SimpleRewardDistributor__factory {
    return super.connect(signer) as SimpleRewardDistributor__factory;
  }
  static readonly contractName: "SimpleRewardDistributor";
  public readonly contractName: "SimpleRewardDistributor";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleRewardDistributorInterface {
    return new utils.Interface(_abi) as SimpleRewardDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleRewardDistributor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SimpleRewardDistributor;
  }
}
